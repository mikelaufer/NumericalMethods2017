% Created 2018-01-28 Sun 12:02
% Intended LaTeX compiler: pdflatex
\documentclass[11pt]{article}
\usepackage[utf8]{inputenc}
\usepackage[T1]{fontenc}
\usepackage{graphicx}
\usepackage{grffile}
\usepackage{longtable}
\usepackage{wrapfig}
\usepackage{rotating}
\usepackage[normalem]{ulem}
\usepackage{amsmath}
\usepackage{textcomp}
\usepackage{amssymb}
\usepackage{capt-of}
\usepackage{hyperref}
\usepackage{minted}
\input {preamble.tex}
\usepackage[T1]{fontenc}
\usepackage{libertine}
\renewcommand*\oldstylenums[1]{{\fontfamily{fxlj}\selectfont #1}}
\usepackage{lmodern}
\usepackage{natbib}
\author{Michael Laufer}
\date{\today}
\title{Steady State and Transient Thermal Simulation of a 2D Heatpipe-based Cooler for Mobile Processors}
\hypersetup{
 pdfauthor={Michael Laufer},
 pdftitle={Steady State and Transient Thermal Simulation of a 2D Heatpipe-based Cooler for Mobile Processors},
 pdfkeywords={},
 pdfsubject={},
 pdfcreator={Emacs 25.3.1 (Org mode 9.1.4)}, 
 pdflang={English}}
\begin{document}

\maketitle
\begin{abstract}

This is the abstract.

\end{abstract}

\section{Introduction}
\label{sec:orga05e742}

Electronics cooling  technologies have \cite{versteeg1995introduction} 

one more  
\section{Project Motivation}
\label{sec:org43f947f}
blah blha 
\section{Numerical Method}
\label{sec:orgf5a53e9}
The governing equation in our steady state heat conduction problem is the 2d heat equation, essentially the Poisson equation with a diffusion constant (in this case the thermal conductivity).
\[
\nabla \cdot ( \Gamma \nabla \phi ) = S_{\phi}
\]
As per the Finite Volume Method, the equation is integrated over the volume of each cell, whereby with the use of the Gauss divergence theorem, the resulting equation is seen in equation 7.13 and 7.14 in the class textbook \cite{mazumder2015numerical}.
\[
\int_{V_{0}} \nabla \cdot ( \Gamma \nabla \phi ) dV =  \int_{S} ( \Gamma \nabla \phi ) \cdot \hat{n} dA
\]

\[
 \int_{S} ( \Gamma \nabla \phi ) \cdot \hat{n} dA = \sum_{f=1}_{N_{f,O}} \left[ ( \Gamma \nabla \phi )_{f} \cdot \hat{n} \right] A_{f}
\]
In 2D cartisian coordinates the value of the flux at the cell faces is straightforward. The book goes into great detail showing how the flux can be evaluated using a coordinate system with basis vectors in the face normal, and face tangential direction. 
From equation 7.50 in the book:
\[
( \nabla \phi ) \cdot \hat{nf} = \frac{(\nabla \phi )_{f} \cdot I_{f}}{\delta_{f}}} - \frac{\left[ (\nabla \phi )_{f} \cdot \hat{t}_{f} \right] \hat{t}_{f} \cdot I_{f} }{\delta_{f}}
\]
The face tangent directional component of the flux, is evaluated using the values of \(\phi\) at the vertex locations, but as only cell center values are known, an expression for the vertex values as a function of cell center values must be used. This leads to the expression given in equation 7.58:
\[
( \nabla \phi ) \cdot \hat{nf} = \sum_{f=1}^{N_{f,O}}\Gamma_{f} \left( \frac{\phi_{N_{f}} - \phi_{O} }{\delta_{f}} - \left[ \frac{\phi_{a,f} - \phi_{b,f}}{\delta_{f} A_{f}} \right] \hat{t_{f}}} \cdot I_{f} \right) A_{f}
\]
In general two variations of the scheme can be formulated. One, an implicit approach, whereby substituting expressions for the vertex values given in equation 7.36 in the book, leads to an equation containing only cell center values. A second approach, one used in this work, is to treat the vertex values explicitly, leading to an iterative approach, where the vertex values from the previous iteration are used. The explicit approach is significantly easier to implement, as the only unknowns are adjacent cell center values. On the other hand, in the implicit approach, a less sparse coefficient matrix will be formed, owing to the fact that the stencil now extends beyond the immediate neighbors. The explicit approach is more commonly used than the implicit approach, and it is the one used in this work.

The implementation of the scheme for the steady state case is as follows:
\begin{enumerate}
\item Interpolate vertex values from cell center values.
\item Loop over every cell face, add respective link value contribution to the coefficient matrix and RHS vector for every internal face (not boundary node)
\item Loop over each face requiring special boundary treatment, and add the contribution to the coefficient matrix and RHS vector.
\item Solve the sparse system
\item Compute norm of solution, and check for convergence. If not converged, return to step 1.
\end{enumerate}

This is implemented in the "main" of the python code in the following easy-to-follow code snippet (full code available in Appendix B):
\begin{minted}[]{python}
if __name__ == '__main__':
    converged = False
    iteration = 0
    norm = -1
    max_iter = 50
    t0 = time.time()
    while not converged:
	iteration += 1
	A = lil_matrix((nelements, nelements))
	b[:]   = 0.0
	# interpolate to vertices
	phi_vert = vertices_interpolate(phi_vert, phi)  
	# assemble the coefficient and rhs matrix for allfaces
	A, b = compute_interior_faces(A, b)
	b = compute_neumann_faces(b)
	b = compute_adiabatic_faces(b)
	A, b = compute_robin_faces(A, b)
	phi_new = spsolve(A.tocsc(), b)
	norm = np.linalg.norm(phi-phi_new)
	if (norm < tolerance or iteration >= max_iter):
	    print('Converged in %d iterations'%iteration)
	    converged = True
	    break
	print('Iteration %d, Error = %g'%(iteration, norm))
	phi[:] = phi_new[:]
\end{minted}

\subsection{Boundary Conditions}
\label{sec:orgb6314a9}
The heatpipe based cooler that we are trying to model has 3 boundary conditions:
\begin{enumerate}
\item Heat flux from the electronic component on the bottom surface of the cooler
\item Adiabatic surfaces on the sides of the cooler
\item Convective heat transfer from the fin surfaces
\end{enumerate}

\subsubsection{Heat Flux Boundary Condition}
\label{sec:org344aec5}
The heat flux on the bottom of the cooler is essentially a Neumann boundary condition. The contribution of the corresponding face to the RHS vector is just the heat flux value itself, \$J\(_{\text{B}}\). 
\[
(\nabla \phi_{B} ) \cdot \hat{n}_{B} = J_{B}
\]

This is implemented in the following function that returns the new RHS vector:
\begin{minted}[]{python}
def compute_neumann_faces(b):
    # assemble coefficient & rhs for all Neumann faces
    for tmp_face_index, face_index in enumerate(neumann_faces):
	elem_index = f2e[face_index, 0]
	ds         = face_areas[face_index]
	b[elem_index] += heat_flux*ds
    return(b)
\end{minted}
\subsubsection{Adiabatic Boundary Condition}
\label{sec:org3ff7707}
The adiabatic boundary condition can be thought of as a Neumann boundary condition where the spatial derivative is zero. Or:
\[
(\nabla \phi_{B} ) \cdot \hat{n}_{B} = J_{B} = 0
\]
The implementation is thus rudimentary, as the contribution of the adiabatic face to the RHS vector is just zero.
\subsubsection{Convective Heat Transfer Boundary Condition}
\label{sec:org6fce0b7}
A convective heat transfer boundary condition relates the heat flux though a surface to the temperature difference of the surface and the ambient fluid temperature.
\[
\dot{Q} = hA_{f}(T_{S}-T_{\infty})
\]
We can recognize that this is a form of a Robin boundary condition. The text book gives a generic formula for the implementation of Robin boundary conditions in Equations 7.90:
\[
\alpha ( \nabla \phi_{B}) \cdot \hat{n_{B}} + \beta \phi_{B} = \gamma 
\] 
and the flux in equation 7.92:
\[
( \nabla \phi ) \cdot \hat{nf} =  \left( \frac{\gamma}{\beta} -\phi_{O} - [(\nabla \phi)_{B} \cdot \hat{t}_{B}] \hat{t}_{B} \cdot I_{B} \right) / \left( \delta_{B} + \frac{\alpha}{\beta} \right)
\]

Using the above equation we ascertain:
\[ \alpha = \Gamma \] 
\[ \beta = h \] 
\[ \gamma = -h T_{\infty} \] 

The implementation of this boundary condition is seen in the following code snippet:
\begin{minted}[]{python}
def compute_robin_faces(A, b):
    # assemble coefficient & rhs for all Robin faces
    for tmp_face_index, face_index in enumerate(robin_faces):
	elem_index      = f2e[face_index, 0]
	elem_face_index = -1
	for tmp_index in range(elem_nfaces):
	    if e2f[elem_index, tmp_index] == face_index:
		elem_face_index = tmp_index
		break
	deltaf = elinks[elem_index, elem_face_index, 0]
	tdotI  = elinks[elem_index, elem_face_index, 1]
	ds     = face_areas[face_index]
	node1, node2 = xfaces[face_index]
	b[elem_index] -= ds*k_faces[face_index]*(-gamma_div_beta/(deltaf + alpha_div_beta) + (phi_vert[node2]-phi_vert[node1])*tdotI/(ds*(deltaf + alpha_div_beta)))
	A[elem_index, elem_index] += k_faces[face_index]*ds/(deltaf + alpha_div_beta)
    return(A, b)
\end{minted}
\subsection{Material Properties}
\label{sec:org161168c}
The final important element in the numerical implementation of a heatpipe based cooler is dealing with the discontinuous material properties that are inherent in the problem. The heatpipe is a closed rod with a fluid that evaporates and turns to a vapor at the hot end, and due to density differences, moves to the cold end, where it condenses back down to a liquid state. This process allows the heatpipe to be a very efficient way of transporting large amounts heat over relatively long distances. This is often modelled as a material with an extremely high thermal conductivity, reaching values up to 100 times the thermal conductivity of copper. In this work, the thermal conductivity was chosen to be \(K_{heatpipe}=10000\). 
This leads to a discontinuous thermal conductivity, which if implemented naively leads to inaccuracies during the cell center value to face value interpolation process. 
One way to deal with this discontinuity is to use a an inverse distance-weighted interpolation for the thermal conductivty. This can be seen in equation 7.32b:
\[
K_{f} = \frac{K_{1}K_{2}}{\frac{K_{1}\delta_{2} + K_{2}\delta_{1}}{\delta_{1}+\delta_{2}}}
\]

To implement this 2 additional pre-proccessing steps are needed. First a new array called \(K_{elements}\) is created that contains the values of the thermal conductivity for each cell volume. The values are determined by the location of the centroids of each cell.
\begin{minted}[]{python}
print('{:<30}'.format('Setting Cell Diffusion Coefficients...'))
k_elements = k_nom*np.ones(nelements)
for elem_index in range(nelements): 
    #checks if cell centroid is inside of heatpipe
    if msh.cents[elem_index][1] > 0.005 and msh.cents[elem_index][1] < 0.03:
	    k_elements[elem_index] = 10000.0
\end{minted}
Next using geometrical and mesh generation data, the facial values can be computed using the above formulation
\begin{minted}[]{python}
print('{:<30}'.format('Computing Face Diffusion Coefficients...\n'))
k_faces = 400*np.ones(msh.nfaces)
for face_index in range(msh.nfaces):
    if face_index not in msh.bfaces:
	element_index_1 = msh.f2e[face_index,0]
	k_element_1 =  k_elements[element_index_1]
	for tmp_index in range(msh.nelements):
	    if msh.e2f[element_index_1, tmp_index] == face_index:
		face_index_1 = tmp_index
		break
	dist_element_1 = msh.elinks[element_index_1, face_index_1, 0]
	element_index_2 = msh.f2e[face_index,1]
	k_element_2 =  k_elements[element_index_2]
	for tmp_index in range(msh.nelements):
	    if msh.e2f[element_index_2, tmp_index] == face_index:
		 face_index_2 = tmp_index
		 break
	dist_element_2 = msh.elinks[element_index_2, face_index_2, 0]
	k_faces[face_index] = (k_element_1*k_element_2)/((k_element_1*dist_element_2 + k_element_2*dist_element_1)/(dist_element_1 + dist_element_2))
\end{minted}
\section{Grid Generation}
\label{sec:org31bf68e}
blah blah \cite{versteeg1995introduction}  
\section{Steady State Results}
\label{sec:orgebe10f7}
blah blah
\section{Transient Results}
\label{sec:org9ebf18b}
blah blah
\section{Summary and Conclusions}
\label{sec:org0e5833b}
blah blah 
\newpage
\section{Appendix A - GMSH grid generation script}
\label{sec:org7f51933}
\section{Appendix B - Steady State Code}
\label{sec:orgd68af3a}
blah blah
\newpage
\section{Appendix C - Unsteady Code}
\label{sec:orgdb972c9}
blah blah   

\bibliography{report}
\bibliographystyle{abbrvnat}
\end{document}